 --Problem_01
CREATE DATABASE SUPERMARKET
GO
USE SUPERMARKET
GO
CREATE TABLE CATEGORIES (
  ID INT IDENTITY(1,1) PRIMARY KEY,
  NAME NVARCHAR(30) NOT NULL
)

CREATE TABLE ITEMS (
  ID INT IDENTITY(1,1) PRIMARY KEY,
  NAME NVARCHAR(30) NOT NULL,
  PRICE DECIMAL(18,2) NOT NULL,
  CATEGORYID INT NOT NULL FOREIGN KEY REFERENCES CATEGORIES(ID)
)

CREATE TABLE EMPLOYEES(
  ID INT IDENTITY(1,1) PRIMARY KEY,
  FIRSTNAME NVARCHAR(50) NOT NULL,
  LASTNAME NVARCHAR(50) NOT NULL,
  PHONE CHAR(12) NOT NULL,
  SALARY DECIMAL(18,2) NOT NULL,
)

CREATE TABLE ORDERS(
  ID INT IDENTITY(1,1) PRIMARY KEY,
  [DATETIME] DATETIME NOT NULL,
  EMPLOYEEID INT NOT NULL FOREIGN KEY REFERENCES EMPLOYEES(ID)
)

CREATE TABLE ORDERITEMS(
  ORDERID INT NOT NULL FOREIGN KEY REFERENCES ORDERS(ID),
  ITEMID INT NOT NULL FOREIGN KEY REFERENCES ITEMS(ID),
  QUANTITY INT NOT NULL,
  PRIMARY KEY (ORDERID, ITEMID),
  CONSTRAINT [SOMECONSTR] CHECK(QUANTITY >= 1)
)

CREATE TABLE SHIFTS(
  ID INT IDENTITY(1,1),
  EMPLOYEEID INT NOT NULL FOREIGN KEY REFERENCES EMPLOYEES(ID),
  CHECKIN DATETIME NOT NULL,
  CHECKOUT DATETIME NOT NULL,
  CONSTRAINT CHK_DATES CHECK (CHECKIN < CHECKOUT),
  PRIMARY KEY(ID, EMPLOYEEID)
)

--Problem_02
INSERT INTO EMPLOYEES
(FIRSTNAME,  LASTNAME,  PHONE,  SALARY)
VALUES
('Stoyan',  'Petrov',  '888-785-8573',  500.25),
('Stamat',  'Nikolov',  '789-613-1122',  999995.25),
('Evgeni',  'Petkov',  '645-369-9517',  1234.51),
('Krasimir',  'Vidolov',  '321-471-9982',  50.25)

INSERT INTO ITEMS
(NAME,  PRICE,  CATEGORYID)
VALUES
('Tesla battery',  154.25,  8),
('Chess',  30.25,  8),
('Juice',  5.32,  1),
('Glasses',  10,  8),
('Bottle of water',  1,  1)

--Problem_03
UPDATE ITEMS
SET PRICE = PRICE * 1.27
WHERE CATEGORYID IN (1, 2, 3)

--Problem_04
DELETE   FROM [DBO].[ORDERITEMS]
WHERE ORDERID = 48

--Problem_05
SELECT [ID]
      ,[FIRSTNAME]
  FROM [DBO].[EMPLOYEES]
  WHERE [SALARY] > 6500
  ORDER BY FIRSTNAME, ID

--Problem_06
SELECT [FIRSTNAME] + ' ' + [LASTNAME] AS [FULL NAME], PHONE
FROM [SUPERMARKET].[DBO].[EMPLOYEES]
WHERE PHONE LIKE '3%'
ORDER BY FIRSTNAME, PHONE

--Problem_07
SELECT FIRSTNAME, LASTNAME
    ,COUNT(EMPLOYEEID) AS COUNT
  FROM [DBO].[ORDERS]
  INNER JOIN [DBO].[EMPLOYEES] ON [DBO].[ORDERS].[EMPLOYEEID] = [DBO].[EMPLOYEES].ID
  GROUP BY FIRSTNAME, LASTNAME, EMPLOYEEID
  ORDER BY COUNT(EMPLOYEEID) DESC, FIRSTNAME

--Problem_08
  SELECT FIRSTNAME, LASTNAME, T.[WORK HOURS]
  FROM
  (SELECT EMPLOYEEID
  ,AVG(DATEDIFF(HOUR, [CHECKIN], [CHECKOUT])) AS [WORK HOURS]
  FROM [DBO].[SHIFTS]
  GROUP BY  EMPLOYEEID) T
  INNER JOIN [DBO].[EMPLOYEES] ON T.[EMPLOYEEID] = [DBO].[EMPLOYEES].ID
  WHERE T.[WORK HOURS] > 7
  ORDER BY T.[WORK HOURS] DESC, T.EMPLOYEEID

--Problem_09
SELECT TOP(1) [DBO].[ORDERITEMS].ORDERID, SUM(QUANTITY * PRICE) AS TOTAL
FROM [DBO].[ORDERITEMS]
INNER JOIN [DBO].[ITEMS] ON [DBO].[ITEMS].ID = [DBO].[ORDERITEMS].ITEMID
GROUP BY ORDERID
ORDER BY SUM(QUANTITY * PRICE) DESC

--Problem_10
  WITH T AS (
  SELECT [ORDERID]
    ,[PRICE]
    ,RANK() OVER (PARTITION BY [ORDERID] ORDER BY [PRICE] ASC) AS EXPENSIVEPRICE
    ,RANK() OVER (PARTITION BY [ORDERID] ORDER BY [PRICE] DESC) AS CHEAPPRICE
  FROM [DBO].[ORDERITEMS]
  INNER JOIN [DBO].[ITEMS] ON [DBO].[ITEMS].ID = [DBO].[ORDERITEMS].ITEMID
  GROUP BY ORDERID, PRICE
  )

  SELECT TOP 10 T.ORDERID, T.PRICE AS EXPENSIVEPRICE, T2.PRICE AS CHEAPPRICE
  FROM T
  INNER JOIN T AS T2 ON T.ORDERID = T2.ORDERID
  WHERE T.CHEAPPRICE = 1 AND T2.EXPENSIVEPRICE = 1
  ORDER BY T.PRICE DESC, T.ORDERID

--Problem_11
SELECT DISTINCT [EMPLOYEEID]
    ,E.FIRSTNAME
    ,E.LASTNAME
  FROM [DBO].[ORDERS] O
  LEFT JOIN DBO.EMPLOYEES E ON E.ID = O.[EMPLOYEEID]
  ORDER BY O.EMPLOYEEID

--Problem_12
  SELECT T.EMPLOYEEID AS ID,  CONCAT(E.FIRSTNAME, ' ', E.LASTNAME) AS [FULL NAME]
FROM
(
  SELECT [EMPLOYEEID]
    ,DATEDIFF(HOUR, [CHECKIN], [CHECKOUT]) AS [AVG]
  FROM [DBO].[SHIFTS]
  INNER JOIN [DBO].EMPLOYEES ON [DBO].EMPLOYEES.ID = [DBO].[SHIFTS].EMPLOYEEID
  GROUP BY [EMPLOYEEID], DATEDIFF(HOUR, [CHECKIN], [CHECKOUT])
  HAVING DATEDIFF(HOUR, [CHECKIN], [CHECKOUT]) < 4)
  T
  INNER JOIN DBO.EMPLOYEES E ON T.EMPLOYEEID = E.ID
  ORDER BY T.EMPLOYEEID

--Problem_13
SELECT TOP 10 T.[FULL NAME], SUM(T.[TOTAL PRICE]) AS [TOTAL PRICE], SUM(T.QUANTITY) AS ITEMS
FROM
(SELECT [ORDERID]
    ,SUM(PRICE * QUANTITY) AS [TOTAL PRICE]
    ,EMPLOYEEID
    ,SUM(QUANTITY) AS QUANTITY
    ,E.FIRSTNAME + ' ' + E.LASTNAME AS [FULL NAME]
  FROM [DBO].[ORDERITEMS] O
  INNER JOIN [DBO].[ITEMS] ON [DBO].[ITEMS].ID = O.ITEMID
  INNER JOIN [DBO].[ORDERS] ON [DBO].[ORDERS].ID = O.ORDERID
  INNER JOIN [DBO].[EMPLOYEES] E ON E.ID = [DBO].[ORDERS].EMPLOYEEID
  GROUP BY ORDERID, EMPLOYEEID, DBO.ORDERS.DATETIME, E.FIRSTNAME + ' ' + E.LASTNAME
  HAVING DBO.ORDERS.DATETIME < '2018-06-15'
  ) T
  GROUP BY T.[FULL NAME]
  ORDER BY SUM(T.[TOTAL PRICE]) DESC,  SUM(T.QUANTITY) DESC

--Problem_14
SELECT [FIRSTNAME] + ' ' + [LASTNAME] AS [FULL NAME]
    ,DATENAME(DW, [CHECKIN]) AS [DAY OF WEEK]
  FROM [DBO].[EMPLOYEES] E
  LEFT JOIN [DBO].[ORDERS] ON E.ID = [DBO].[ORDERS].EMPLOYEEID
  INNER JOIN [DBO].[SHIFTS] ON [DBO].[SHIFTS].EMPLOYEEID = E.ID
  WHERE [DBO].[ORDERS].EMPLOYEEID IS NULL
  AND DATEDIFF(HOUR, [CHECKIN] ,[CHECKOUT]) > 12
  ORDER BY E.ID

--Problem_15
SELECT EMP.FIRSTNAME + ' ' + EMP.LASTNAME AS FULLNAME, DATEDIFF(HOUR, S.CHECKIN, S.CHECKOUT) AS WORKHOURS, E.TOTALPRICE AS TOTALPRICE FROM
 (
    SELECT O.EMPLOYEEID, SUM(OI.QUANTITY * I.PRICE) AS TOTALPRICE, O.DATETIME,
  ROW_NUMBER() OVER (PARTITION BY O.EMPLOYEEID ORDER BY O.EMPLOYEEID, SUM(I.PRICE * OI.QUANTITY) DESC ) AS RANK
    FROM ORDERS AS O
    JOIN ORDERITEMS AS OI ON OI.ORDERID = O.ID
    JOIN ITEMS AS I ON I.ID = OI.ITEMID
GROUP BY O.EMPLOYEEID, O.ID, O.DATETIME
) AS E
JOIN EMPLOYEES AS EMP ON EMP.ID = E.EMPLOYEEID
JOIN SHIFTS AS S ON S.EMPLOYEEID = E.EMPLOYEEID
WHERE E.RANK = 1 AND E.DATETIME BETWEEN S.CHECKIN AND S.CHECKOUT
ORDER BY FULLNAME, WORKHOURS DESC, TOTALPRICE DESC

--Problem_16
SELECT
DATEPART(DAY, O.DATETIME)  AS [DAYOFMONTH],
CAST(AVG(I.PRICE * OI.QUANTITY)  AS DECIMAL(15, 2)) AS TOTALPRICE
FROM ORDERS AS O
JOIN ORDERITEMS AS OI ON OI.ORDERID = O.ID
JOIN ITEMS AS I ON I.ID = OI.ITEMID
GROUP BY DATEPART(DAY, O.DATETIME)
ORDER BY DAYOFMONTH ASC

--Problem_17
SELECT
  I.NAME,
  C.NAME,
  SUM(OI.QUANTITY)  AS [COUNT],
  SUM(I.PRICE * OI.QUANTITY) AS TOTALPRICE
FROM ORDERS AS O
  JOIN ORDERITEMS AS OI ON OI.ORDERID = O.ID
  RIGHT JOIN ITEMS AS I ON I.ID = OI.ITEMID
  JOIN CATEGORIES AS C ON C.ID = I.CATEGORYID
GROUP BY I.NAME, C.NAME
ORDER BY TOTALPRICE DESC, [COUNT] DESC 

--Problem_18
create or alter function dbo.udf_GetPromotedProducts(@CurrentDate date, @StartDate date, @EndDate date, @Discount float, @FirstItemId int, @SecondItemId int, @ThirdItemId int)
returns VARCHAR(80)
AS
BEGIN
		Declare @items int;
		SET @items = (SELECT COUNT(*) FROM [dbo].[Items] WHERE Id IN (@FirstItemId, @SecondItemId, @ThirdItemId));

		IF @items <> 3
			BEGIN
				RETURN 'One of the items does not exists!';
			END
		
		IF (@StartDate < @CurrentDate AND @CurrentDate < @EndDate)
			BEGIN 
				Declare @first varchar(50) = (SELECT FORMATMESSAGE('%s price: %s', Cast(Name as varchar(50)) , CAST(ROUND(Cast(Price - (Price * @discount / 100) as decimal(18,2)), 2) as varchar(50))) FROM [dbo].[Items] WHERE Id = @FirstItemId);

				Declare @second varchar(50) = (SELECT FORMATMESSAGE('%s price: %s', Cast(Name as varchar(50)) , CAST(Cast(Price - (Price * @discount / 100) as decimal(18,2)) as varchar(50))) FROM [dbo].[Items] WHERE Id = @SecondItemId);
				
				Declare @third varchar(50) = (SELECT FORMATMESSAGE('%s price: %s', Cast(Name as varchar(50)) , CAST(Cast(Price - (Price * @discount / 100) as decimal(18,2)) as varchar(50))) FROM [dbo].[Items] WHERE Id = @ThirdItemId);

				RETURN @first + ' <-> ' + @second + ' <-> ' + @third;
			END
		ELSE
			BEGIN
				RETURN 'The current date is not within the promotion dates!';
			END
		
		RETURN 'ERROR';
END
	
--Problem_19
Create procedure dbo.usp_CancelOrder @OrderId int, @CancelDate date
AS
	Declare @order int = (select COUNT(*) from dbo.orders where id = @OrderId);

	IF (@order = 0)
		BEGIN
			;THROW 51000, 'The order does not exist!', 1
		END

	Declare @IssuanceDate DateTime = (select [DateTime] from dbo.orders where id = @OrderId);
	DECLARE @DateDiff INT = (SELECT DATEDIFF(DAY, @IssuanceDate, @CancelDate))

	IF (@DateDiff > 3)
		BEGIN
			;THROW 51000, 'You cannot cancel the order!', 2
		END

	DELETE FROM dbo.OrderItems WHERE OrderId = @OrderId

	DELETE FROM dbo.Orders WHERE Id = @OrderId;
GO

--Problem_20
Create Table DeletedOrders(
	OrderId int, 
	ItemId int, 
	ItemQuantity int
)

Create Trigger MyTrigger
on [dbo].[OrderItems]
After Delete
AS
	  INSERT INTO DeletedOrders (OrderId, ItemId, ItemQuantity)
	  SELECT d.OrderId, d.ItemId, d.Quantity
	    FROM deleted AS d
